version: '3.8'

# Define common environment variables for reuse using YAML anchors
x-common-env: &common-env
  EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/

x-db-env: &db-env
  SPRING_DATASOURCE_USERNAME: root
  SPRING_DATASOURCE_PASSWORD: root

# Define JWT environment variables with actual values
# These are the actual values that will be used by the services.
# It's better to define them here directly or load from a .env file,
# rather than referencing themselves like APP_JWT_SECRET: ${APP_JWT_SECRET}
x-jwt-env-values: &jwt-env-values
  JWT_SECRET: 404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970 # Consistent with Auth Service JwtUtil
  JWT_EXPIRATION: 86400000 # Consistent with Auth Service JwtUtil
  JWT_REFRESH_TOKEN_EXPIRATION: 604800000 # For Auth Service

# Define RabbitMQ environment variables for reuse
x-rabbitmq-env: &rabbitmq-env
  SPRING_RABBITMQ_HOST: rabbitmq
  SPRING_RABBITMQ_PORT: 5672
  SPRING_RABBITMQ_USERNAME: guest
  SPRING_RABBITMQ_PASSWORD: guest

services:
  # MySQL Database Service
  mysql:
    image: mysql:8.0
    container_name: intellimart-mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: intelimart_auth_db # Initial database for auth-service
      # Add other databases here to be created on startup, or rely on Spring Boot's ddl-auto
      MYSQL_ADDITIONAL_DATABASES: "intelimart_product_db,intelimart_cart_db,intelimart_order_db"
      # MYSQL_USER: root # Added for clarity, though root password is used for root user
      # MYSQL_PASSWORD: root # Added for clarity
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql # Persist MySQL data
      - ./mysql-init:/docker-entrypoint-initdb.d # Optional: For initial schema/data
    networks:
      - intellimart-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-proot"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s # Give MySQL enough time to initialize

  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: intellimart-rabbitmq
    ports:
      - "5672:5672" # AMQP protocol port
      - "15672:15672" # Management UI port
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - intellimart-network
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq:rw
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s


  # Eureka Server Service
  eureka-server:
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    container_name: intellimart-eureka-server
    ports:
      - "8761:8761"
    networks:
      - intellimart-network
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 15s # Increased interval for Eureka startup
      timeout: 10s
      retries: 10
      start_period: 60s # Give it more time to start up and register

  # Auth Service
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: intellimart-auth-service
    ports:
      - "8089:8089"
    environment:
      <<: [*common-env, *db-env, *jwt-env-values] # Use the actual JWT values
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/intellimart_auth_db?createDatabaseIfNotExist=true&useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
      # Removed redundant APPLICATION_SECURITY_JWT_SECRET_KEY, etc. as JWT_SECRET is now directly used by JwtUtil
      # If your application.properties also uses APPLICATION_SECURITY_JWT_*, you might need to keep them
      # or adjust your Spring Boot config to use the direct JWT_SECRET env vars.
    networks:
      - intellimart-network
    depends_on:
      eureka-server:
        condition: service_healthy
      mysql:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8089/actuator/health"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 60s

  # Product Service
  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    container_name: intellimart-product-service
    ports:
      - "8082:8082"
    environment:
      <<: [*common-env, *db-env]
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/intelimart_product_db?createDatabaseIfNotExist=true&useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
      PRODUCT_IMAGES_UPLOAD_DIR: /app/uploads # Path inside container
    volumes:
      - ./product-service/uploads:/app/uploads # Mount host volume for persistence
    networks:
      - intellimart-network
    depends_on:
      eureka-server:
        condition: service_healthy
      mysql:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 60s

  # Shopping Cart Service
  shopping-cart-service:
    build:
      context: ./shopping-cart-service
      dockerfile: Dockerfile
    container_name: intellimart-shopping-cart-service
    ports:
      - "8083:8083"
    environment:
      <<: [*common-env, *db-env]
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/intelimart_cart_db?createDatabaseIfNotExist=true&useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
    networks:
      - intellimart-network
    depends_on:
      eureka-server:
        condition: service_healthy
      mysql:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 60s

  # Order Service
  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    container_name: intellimart-order-service
    ports:
      - "8084:8084"
    environment:
      <<: [*common-env, *db-env, *rabbitmq-env] # Include RabbitMQ env
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/intelimart_order_db?createDatabaseIfNotExist=true&useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
      # Razorpay properties matching application.properties and @Value annotations (key-id, key-secret)
      RAZORPAY_KEY_ID: rzp_test_BRg0a8xA7ICk6v # Your actual Razorpay test Key ID
      RAZORPAY_KEY_SECRET: WNfupjGp18ruBLcWkRMQmP3w # Your actual Razorpay test Key Secret
      RAZORPAY_WEBHOOK_SECRET: gG1sN0l3c2x4Y1l5d0h0c1F2YjVqN0t2ZzFjMjY0d0Q= # Your generated webhook secret
    networks:
      - intellimart-network
    depends_on:
      eureka-server:
        condition: service_healthy
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/actuator/health"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 60s

  # Notification Service
  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: intellimart-notification-service
    ports:
      - "8085:8085"
    environment:
      <<: [*common-env, *rabbitmq-env] # Include RabbitMQ env
    networks:
      - intellimart-network
    depends_on:
      eureka-server:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/actuator/health"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 60s

  # API Gateway Service
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: intellimart-api-gateway
    ports:
      - "8081:8081"
    environment:
      <<: [*common-env, *jwt-env-values] # Use the actual JWT values
    networks:
      - intellimart-network
    depends_on:
      eureka-server:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      product-service:
        condition: service_healthy
      shopping-cart-service:
        condition: service_healthy
      order-service:
        condition: service_healthy
      notification-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s # Gateway needs more time as it depends on many services
    

volumes:
  mysql_data: # Named volume for MySQL data persistence
  rabbitmq_data:

networks:
  intellimart-network:
    driver: bridge
