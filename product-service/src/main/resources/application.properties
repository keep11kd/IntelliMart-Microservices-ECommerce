# Server Port for Product Service
server.port=8082

# Spring Application Name (for Eureka)
spring.application.name=product-service

# Database Configuration
# IMPORTANT: Changed localhost to host.docker.internal for Docker container to host MySQL communication
spring.datasource.url=jdbc:mysql://host.docker.internal:3306/intelimart_product_db?useSSL=false&serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

# Add detailed Hibernate logging to diagnose database issues more clearly
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.orm.jdbc.bind=TRACE
logging.level.com.netflix.discovery=DEBUG

# Eureka Client Configuration
eureka.client.service-url.defaultZone=http://localhost:8761/eureka/
# Address of your running Eureka Server
eureka.client.fetch-registry=true
eureka.client.register-with-eureka=true
eureka.instance.hostname=localhost
eureka.instance.instance-id=${spring.application.name}:${instanceId:${random.value}}

# Actuator Configuration (Optional, but good for monitoring)
management.endpoints.web.exposure.include=*

# --- Image Upload Configuration ---
# Directory where product images will be stored.
# Use a path outside your project's target folder to persist images.
# Example for Linux/macOS: /opt/intellimart/product-images
# Example for Windows: C:/intellimart/product-images
product.images.upload-dir=./uploaded_product_images
# Relative to where the JAR runs, or absolute path
# Configure multipart file upload limits (optional, but good practice)
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

# SpringDoc OpenAPI (Swagger UI) Configuration
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.url=/api-docs

application.config.order-service.url=http://localhost:8084
